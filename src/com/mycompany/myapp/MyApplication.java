package com.mycompany.myapp;


import Views.AjouterArticle;
import Views.AjouterProduit;
import Views.AjouterUsers;
import Views.ListEquipe;
import Views.ListLivraison;
import Views.ListUsers;
import Views.Map;
import Views.MatchView;
import Views.ProfileForm;
import Views.SignInForm;
import Views.afficherArticle;
import Views.listProd;
import Views.mapForm;
import com.codename1.components.ToastBar;
import com.codename1.googlemaps.MapContainer;
import com.codename1.io.CharArrayReader;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.JSONParser;
import com.codename1.io.Log;
import com.codename1.io.NetworkManager;
import com.codename1.maps.Coord;
import com.codename1.ui.Button;
import static com.codename1.ui.CN.addNetworkErrorListener;
import static com.codename1.ui.CN.getCurrentForm;
import static com.codename1.ui.CN.updateNetworkThreadCount;
import com.codename1.ui.Container;
import com.codename1.ui.Dialog;
import com.codename1.ui.Display;
import com.codename1.ui.EncodedImage;
import com.codename1.ui.FontImage;
import com.codename1.ui.Form;
import com.codename1.ui.Toolbar;
import com.codename1.ui.geom.Dimension;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import java.io.IOException;
import java.util.List;


/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;
     public static Resources theme1;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme= UIManager.initFirstTheme("/theme1");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
  //  new ProfileForm(theme1).show();
 // new AjouterUsers(theme1).show();
      
     //new afficherArticle(current,theme).show();
     //new AjouterArticle(theme).show();
   //  new mapForm();
   
   //new AjouterProduit(theme).show();

//    new ListLivraison(current,theme).show();
      new SignInForm(theme).show();
     
     //new MatchView(theme).show();
     
   //new ListUsers(theme1);
   
 // new ListUsers(current ,theme).show();
        
     // new Map();
//     Form hi = new Form("Hello World", BoxLayout.y());
//     hi.add(new Label("Hello World"));
//       hi.show();
      
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }
    
    
      public static Resources getTheme(){
        
     theme1= UIManager.initFirstTheme("/theme");

       return theme1; 
    }

}
